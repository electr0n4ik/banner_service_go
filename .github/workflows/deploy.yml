name: Deploy to Server

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  deploy:
    environment:
      name: banner_service_go
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Copy project to server
        run: |
          rsync -avz --delete \
            --exclude='.git' \
            --exclude='*.log' \
            --exclude='.env' \
            -e "ssh -o StrictHostKeyChecking=no" \
            ./ ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:/home/deployer/my-go-app/

      - name: Create environment file
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "
            cd /home/deployer/my-go-app
            
            # Удаляем старый .env файл
            rm -f .env
            
            # Создаем новый .env файл
            echo 'JWT_SECRET=${{ secrets.JWT_SECRET }}' > .env
            echo 'GIN_MODE=release' >> .env
            echo 'PORT=8080' >> .env
            
            # Добавляем закомментированные переменные для будущего использования
            echo '# DB_HOST=localhost' >> .env
            echo '# DB_PORT=5432' >> .env
            echo '# DB_NAME=banner_service' >> .env
            echo '# DB_USER=postgres' >> .env
            echo '# DB_PASSWORD=12345' >> .env
            
            # Проверяем содержимое
            echo '=== Created .env file ==='
            cat .env
          "

      - name: Fix DNS and restart Docker
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "
            # Создаем резервную копию оригинального resolv.conf
            sudo cp /etc/resolv.conf /etc/resolv.conf.backup
            
            # Временно устанавливаем надежные DNS серверы
            echo 'nameserver 8.8.8.8' | sudo tee /etc/resolv.conf
            echo 'nameserver 1.1.1.1' | sudo tee -a /etc/resolv.conf
            
            # Перезапускаем Docker daemon с новыми DNS настройками
            sudo systemctl restart docker
            
            # Ждем запуска Docker
            sleep 10
            
            # Проверяем DNS
            echo '=== Testing DNS ==='
            nslookup registry-1.docker.io || echo 'DNS lookup failed'
            
            # Проверяем доступность Docker Hub
            echo '=== Testing Docker Hub access ==='
            timeout 60 docker pull hello-world:latest || echo 'Docker Hub connection issue'
            
            # Настраиваем Docker daemon для использования внешних DNS
            echo '{\"dns\": [\"8.8.8.8\", \"1.1.1.1\"]}' | sudo tee /etc/docker/daemon.json
            sudo systemctl restart docker
            sleep 10
          "

      - name: Deploy application
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "
            cd /home/deployer/my-go-app
            
            echo '=== Stopping existing containers ==='
            docker-compose down --remove-orphans
            
            echo '=== Cleaning up old images ==='
            docker system prune -f
            docker image prune -f
            
            echo '=== Creating network ==='
            docker network create app-network 2>/dev/null || echo 'Network already exists'
            
            echo '=== Setting permissions ==='
            chmod +x scripts/*.sh 2>/dev/null || true
            
            echo '=== Building and starting containers ==='
            docker-compose build --no-cache --pull
            docker-compose up -d
            
            echo '=== Waiting for services to start ==='
            sleep 20
          "

      - name: Verify deployment
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "
            cd /home/deployer/my-go-app
            
            echo '=== Container Status ==='
            docker-compose ps
            
            echo '=== Network Status ==='
            docker network ls | grep app-network
            
            echo '=== Port Status ==='
            netstat -tlnp | grep -E ':(80|443|3000|8080)' || echo 'Some ports may not be listening'
            
            echo '=== Container Health ==='
            docker-compose logs --tail=10 backend
            docker-compose logs --tail=10 frontend
            docker-compose logs --tail=10 caddy
          "

      - name: Health checks
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "
            # Ждем полной загрузки
            sleep 10
            
            echo '=== Testing Backend Health ==='
            curl -f http://localhost:8080/api/v1/health || echo 'Backend health check failed'
            
            echo '=== Testing Frontend Direct Access ==='
            curl -f http://localhost:3000 || echo 'Frontend direct access failed'
            
            echo '=== Testing Caddy Proxy ==='
            curl -f http://localhost:80 || echo 'Caddy proxy failed'
            
            echo '=== Testing API through Proxy ==='
            curl -f http://localhost/api/v1/health || echo 'API through proxy failed'
          "

      - name: Final status check
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "
            cd /home/deployer/my-go-app
            
            echo '=== Final Container Status ==='
            docker-compose ps
            
            echo '=== Disk Usage ==='
            docker system df
            
            echo '=== Environment File ==='
            cat .env
            
            echo '=== Project Files ==='
            ls -la ./frontend/ | head -10
            
            echo '=== Git Status ==='
            git log -1 --oneline
            
            echo '=== Deployment Summary ==='
            echo 'Frontend: http://localhost:3000 (direct)'
            echo 'Backend: http://localhost:8080 (direct)'
            echo 'Proxy: http://localhost:80 (through Caddy)'
            echo 'API: http://localhost/api/v1/health (through Caddy)'
          "

      - name: Cleanup on failure
        if: failure()
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "
            cd /home/deployer/my-go-app
            
            echo '=== Failure Cleanup ==='
            docker-compose logs --tail=50
            docker-compose down
            
            echo '=== System Resources ==='
            df -h
            free -h
            docker system df
          "
